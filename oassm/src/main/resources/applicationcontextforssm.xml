<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:tx="http://www.springframework.org/schema/tx"
xmlns:p="http://www.springframework.org/schema/p"
xmlns:jdbc="http://www.springframework.org/schema/jdbc"
xmlns:util="http://www.springframework.org/schema/util"
xmlns:jee="http://www.springframework.org/schema/jee"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
xsi:schemaLocation="
http://www.springframework.org/schema/jdbc
http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/util
http://www.springframework.org/schema/util/spring-util.xsd
http://www.springframework.org/schema/jee      
http://www.springframework.org/schema/jee/spring-jee.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd 
http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd" default-init-method="init" default-destroy-method="cleanup">

	<!-- 主配置XML文件 -->
	<!-- 扫描使用注解类配置的Bean  -->
	<context:component-scan base-package="com.city.oa" />
	<!-- 启用AOP注解类 -->
	<aop:aspectj-autoproxy />
	<!-- 启用注解类事务处理 -->
	<tx:annotation-driven transaction-manager="txManager"/>
	<!-- 启动DAO接口扫描，不需要单个DAO接口的注册和配置  -->
	<mybatis:scan base-package="com.city.oa.dao"/>
	
	<!-- 使用Spring内置的JDBC驱动的连接池， 实际项目不推荐使用 -->
	<bean id="dataSourceWithinSpring" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/cityoa"/>
		<property name="username" value="root"/>
		<property name="password" value="root"/>
	</bean>
	
	<!-- 配置DataSource 使用DBCP 1框架 
	<bean id="dataSourceWithDBCP" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/cityoa"/>
		<property name="username" value="root"/>
		<property name="password" value="root"/>
	</bean>
	 -->
	 

	<bean id="dataSourceWithDBCP2" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/cityoa" />
		<property name="username" value="root" />
		<property name="password" value="root" />
		<!-- 连接初始值，连接池启动时创建的连接数量的初始值  默认值是0 -->
		<property name="initialSize" value="1" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请  默认值是0 -->
		<property name="minIdle" value="1" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 ，0时无限制  默认值是8 -->
		<property name="maxIdle" value="2" />
		<!-- 连接池的最大值，同一时间可以从池分配的最多连接数量，0时无限制   默认值是8 -->
		<property name="maxTotal" value="2" />
	</bean>
	
	

	<!-- 配置DataSource 使用C3P0框架  推荐使用此方式 -->
	<bean id="dataSourceWithC3P0"  class="com.mchange.v2.c3p0.ComboPooledDataSource"  destroy-method="close">  
	    <property name="driverClass" value="com.mysql.jdbc.Driver"></property>  
	    <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/cityoa"></property>  
	    <property name="user" value="root"></property>  
	    <property name="password" value="root"></property>  
	    <property name="acquireIncrement" value="2"></property>  
	    <property name="initialPoolSize" value="1"></property>  
	    <property name="maxPoolSize" value="3"></property>  
	    <property name="minPoolSize" value="1"></property>  
	    <property name="acquireRetryDelay" value="100"></property>  
	    <property name="acquireRetryAttempts" value="10"></property>  
	    <property name="breakAfterAcquireFailure" value="false"></property>  
	</bean> 
	
	<!-- 使用Tomcat配置的连接池
	<jee:jndi-lookup id="dataSourceInTomcat" jndi-name="java:comp/env/cityoa"></jee:jndi-lookup>
	 -->
	 
	<!-- MyBatis SqlSessionFactory的工厂Bean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  		<property name="dataSource" ref="dataSourceWithC3P0" />
  		<property name="mapperLocations" value="classpath*:com/city/oa/dao/xml/*.xml" />
  		<property name="typeAliasesPackage" value="com.city.oa.model"></property>
  		<property name="configLocation" value="classpath:mybatis-configforssm.xml"></property>
		
	</bean>
	
	<!-- 配置MyBatis使用的DataSource事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceWithC3P0" />
	</bean>
	
	<!-- 配置单个DAO接口， 此方式淘汰了，不推荐使用 
	<bean id="departmentDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
  		<property name="mapperInterface" value="com.city.oa.dao.IDepartmentDao" />
  		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	-->
	<!-- 配置DAO接口的扫描 不推荐使用，推荐使用 <mybatis:scan>方式扫描DAO即可, MyBatis-Spring提供了更简单的方式 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.city.oa.dao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	
	-->
		
</beans>

